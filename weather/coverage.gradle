import com.sun.org.apache.xerces.internal.parsers.XMLParser

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

// Coverage limits used to fail the build
ext {
    limits = [
            'branch'     : 4, //minimun branch coverage should be 75
            'line'       : 2  //minimun line coverage should be 75
    ]
}

Properties props = new Properties()
props.load(new FileInputStream("$projectDir/coverage.properties"))
ext.externalProps = props
def exclusionsList = externalProps['coverage.exclusions']
def exclusions = exclusionsList.split(',')
jacoco {
    def destinationFile = file("$buildDir/jacoco/${name}/report.exec")
    def reportsDir = file("$buildDir/reports/jacoco")
    def append = true
    // logger.lifecycle("excluding ${exclusions}")
    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled true
        }
        executionData project.tasks.test
        executionData project.tasks.componentTest
        afterEvaluate {
            files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: exclusions)
            })
        }

        doLast {
            def report = file("${reportsDir}/test/jacocoTestReport.xml")
            logger.lifecycle("Checking coverage results: ${report}")

            def parser = new XmlParser();
            parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
            parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
            def results = parser.parse(report)

            def percentage = {
                def covered = it.'@covered' as Double
                def missed = it.'@missed' as Double
                ((covered / (covered + missed)) * 100).round(2)
            }

            def counters = results.counter
            def metrics = [:]
            metrics << [
                    'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                    'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                    'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                    'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                    'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                    'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
            ]

            def failures = []
            metrics.each {
                def limit = limits[it.key]
                if (it.value < limit) {
                    failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
                }
            }

            if (failures) {
                logger.quiet("------------------ Code Coverage Failed -----------------------")
                failures.each {
                    logger.quiet(it)
                }
                logger.quiet("---------------------------------------------------------------")
                throw new GradleException("Code coverage failed")
            } else{
                logger.quiet("Passed Code Coverage Checks")
            }
        }
    }
}
check.dependsOn jacocoTestReport